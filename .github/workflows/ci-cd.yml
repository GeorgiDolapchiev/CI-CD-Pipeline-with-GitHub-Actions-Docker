name: CI / CD

on:
  push:
    branches: [ main ]

env:
  IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/cicd-demo
  TAG: ${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - uses: actions/checkout@v4

      # Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests
      - name: Run tests
        run: pytest -q

      # Docker Hub login
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push Docker image with SHA and latest tags
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}:${{ env.TAG }},${{ env.IMAGE }}:latest

      # Setup SSH key for deployment
      - name: Setup SSH key for deploy
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      # Deploy container to VM using the latest image
      - name: Deploy to VM (pull & restart)
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
            "docker pull ${{ env.IMAGE }}:latest \
            && docker rm -f cicd-demo || true \
            && docker run -d --name cicd-demo -p 80:5000 --restart=always ${{ env.IMAGE }}:latest"

      # Optional: verify container is running
      - name: Verify container is running
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
            "docker ps --filter 'name=cicd-demo' --filter 'status=running' --format '{{.Names}}' | grep cicd-demo"

      # Optional: verify app responds to HTTP request
      - name: Verify app is responding
        run: |
          curl -f http://${{ secrets.VM_HOST }} || exit 1
